/*****************************************************************************
 Syntax of the ELLA language expressed in Super-BNF
 G.L.J.M. Janssen, Jan. 1988

 Making the syntax LL(1)

 Reference: The ELLA Language Reference Manual Issue 2.0
 J.D. Morison, N.E. Peeling, T.L. Thorp, E.V. Whiting
 Royal Signals and Radar Establishment
 (c) Crown Copyright, 1986
 (c) Copyright Praxis Systems plc, 1986
*****************************************************************************/

/* Chapter 2 */
/* <text> is the starter symbol of the language. */
<text> ::= { <declaration> }+ .

/* Chapter 3 */
<declaration> ::= 'TYPE' { <typedec> / ',' }+ '.'
               |  'INT'  { <intdec>  / ',' }+ '.'
               |  'FN'   { <fndec>   / ',' }+ '.'
               |  'MAC'  { <macdec>  / ',' }+ '.'
               .

/* Chapter 4 */
<typedec> ::= <name> '=' <type-denoter> .

<type-denoter> ::= <new-type> | <derived-type> .

<new-type> ::= <enumerated> .

<derived-type> ::= <type> .

<enumerated> ::= 'NEW' ( <enumeration-list> | <ELLA-int-type> ) .

<enumeration-list> ::= '(' { <name> [ '&' <type> ] / '|' }+ ')' .

<ELLA-int-type> ::=  <name> '/' '(' <int> '..' <int> ')' .

<type> ::= <type1> [ '->' <type1> ] .

<type1> ::= <name>
         |  '[' <int> ']' <type1>  /* Note: changed to avoid ambiguity */
         |  '(' { <type> / ',' }+ ')'
         .

/* Chapter 5 */
<intdec> ::= <name> '=' <int> .

<int> ::= <formula> .

<formula> ::= <formula1> { <dyadic-operator> <formula1> } .

<formula1> ::= { <monadic-operator> } <formula2> .

<formula2> ::= <name>
            |  <integervalue>
            |  'IF' <boolean> 'THEN' <int> 'ELSE' <int> 'FI'
            |  '(' <int> ')'
            .

<boolean> ::= <formula> .

/* Chapter 6 */
<fndec> ::= <fnname> '=' <input> '->' <type> ':' <fnbody>

/*
         |  <fnname> '='
              'FNSET' '(' { <input> '->' <type> / ',' }+ ')'
                ':' <fnbody>
         |  <fnname> '='
              'FNSET' '[' <int> ']' '(' <input> '->' <type> ')'
                 ':' <fnbody>
*/
         .

<input> ::= '(' { <type> ':' { <name> }+ / ',' }+ ')' .

<fnbody> ::= <unit>
          |  <sequence>
          |  'ARITH' <int>
          |  'REFORM'
          |  'IMPORT'
          |  'DELAY' '(' <values1> ','
                [ <int> ',' [ <values1> ',' ]] <int> ')'
/* Can do without next alternative. Covered by the one above. */
/*        |  'DELAY' '(' <values1> ',' <int> ',' <values1> ',' <int> ')' */
          |  'IDELAY' '(' <values1> ',' <int> ')'
          |  'RAM' '(' <values1> ')'
          .

/* Chapter 7 */
<sequence> ::= 'BEGIN' { <step> } 'OUTPUT' <unit> 'END'
/*
            |  '(' { <step> } 'OUTPUT' <unit> ')'
*/
            .

<step> ::= <declaration>
        |                         'MAKE'  { <makeitem>  / ',' }+ '.'
        |                         'LET'   { <letitem>   / ',' }+ '.'
        |  [ 'FOR' <multiplier> ] 'JOIN'  { <joinitem>  / ',' }+ '.'
        |                         'PRINT' { <printitem> / ',' }+ '.'
        |                         'FAULT' { <faultitem> / ',' }+ '.'
        .

<makeitem> ::= [ '[' <int> ']' ]
        (
          <fnname> ':' { <name> }+
        |
          <macname> '{' <macparams> '}' ':' { <name> }+
        )
        .

<letitem> ::= <name> '=' <unit> .

<joinitem> ::= <unit> '->' <name> [ '[' <int> ']' [ '[' <int> ']' ] ] .

<multiplier> ::= { 'INT' <name> '=' <int> '..' <int> }+ .

<printitem> ::= 'IF' <boolean> 'THEN' { <printable> }+ 'FI'
             |  { <printable> }+
             .

<printable> ::= <string> | <name> .

<faultitem> ::= <printitem> .

/* Chapter 8 */
<unit> ::= <unit1> { ( <fnname>
                     | <macname> '{' <macparams> '}'
                     | 'CONC'
                     ) <unit1> }
        .

<unit1> ::= <unit2> [ '//' <name> ]
         |  <unit1-1> <unit1>
         |  'IO' <name> [ '[' <int> ']' [ '[' <int> ']' ] ]
         .

<unit1-1> ::= <fnname>
           |  <macname> '{' <macparams> '}'
           |  '[' ( <int> | 'INT' <name> '=' <int> '..' <int> ) ']'
           |  <name> '&'
           .

<unit2> ::= (  <name> [ '/' <formula2> ]
            |  'IF' <boolean> 'THEN' <unit> 'ELSE' <unit> 'FI'
            |  <bracketted>
            )  { '[' <int> [ '..' <int> ] ']' }
            .

<bracketted> ::= '(' { <unit> / ',' }+ ')'
              |  'CASE' <unit> 'OF' <choices>
                   { 'ELSEOF' <choices> }
                   [ 'ELSE' <unit> ]
                 'ESAC'
/*
              | '(' <unit> '|' { <choices> / '||' }+ [ '|' <unit> ] ')'
*/
              .

<choices> ::= { <values> ':' <unit> / ',' }+ .

<values> ::= { <values1> / '|' }+ .

<values1> ::= <values2>
           |  <name> '&' <values1>
           |  '[' <int> ']' <values1>
           .

<values2> ::= <name> [ '/' ( <formula2> | '(' <int> '..' <int> ')' ) ]
           |  '(' { <values> / ',' }+ ')'
           |  'IF' <boolean> 'THEN' <values> 'ELSE' <values> 'FI'
           .

/* Chapter 9 */
<macdec> ::= <macname> '{' <macspec> '}' '='
               <input> '->' <type> ':' <fnbody> .

<macspec> ::= { <mactype> { <name> }+ / ',' }+ .

<mactype> ::= 'INT' | 'TYPE' .

<macparams> ::= { <macparam> / ',' }+ .

<macparam> ::= <int> | <type> .

/*
<printitem> ::= see above
<printable> ::= see above
<faultitem> ::= see above
*/
