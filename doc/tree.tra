(* transformational grammar *)

G  = { R }                              => '<' '$' { R } '>'
   .

R  = N ':' E                            => '<' ':' N E '>'
   .

E  = T					=> T
   | T { '|' T }+                       => '<' '|' T { T }+ '>'
   .

T  =                                    => ^
   | Fl					=> Fl
   | Fl { Fl }+                         => '<' ',' Fl { Fl }+ '>'
   .

Fl = F					=> F
   | F { F }+                           => '<' '.' F { F }+ '>'
   .

O  = '[' T ']'                          => '<' '?' T '>'
   | '[' T { '|' T }+ ']'               => '<' '|' ^ T { T }+ '>'
   .

Sl = '{' E '}' [ '*' ]                  => '<' '*' E '>'
   | '{' E '}' '+'                      => '<' '+' E '>'
   | '{' E '/' <> '}' [ '*' ]           => '<' '*' E '>'
   | '{' E '/' <> '}' '+'               => '<' '+' E '>'
   | '{' E '/' A '}' [ '*' ]            => '<' '?' '<' '/' E A '>' '>'
   | '{' E '/' A '}' '+'                => '<' '/' E A '>'
   .

F  = P					=> P
   | P '+'                              => '<' '+' P '>'
   | P '*'                              => '<' '*' P '>'
   | '(' T { '|' T }+ ')' '?'           => '<' '|' <> T { T } + '>'
   | ( A | '(' T ')' ) '?'              => '<' '?' ( A | '(' T ')' ) '>'
   | Sl					=> Sl
   | O					=> O
   .

P  = A					=> A
   | '(' E ')'				=> E
   .

A  = eps                                => ^
   | t                                  => t
   | N                                  => N
   .

